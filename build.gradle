apply plugin: 'java'
apply plugin: 'idea'
apply from: "$projectDir/coverage.gradle"

buildscript {
    ext {
        springBootVersion = '2.1.2.RELEASE'
        springVersion = '5.1.4.RELEASE'
        junitPlatformVersion = '1.3.2'
        junitJupiterVersion = '5.3.2'
        jacksonVersion = ' 2.9.8'
    }
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath "io.spring.gradle:dependency-management-plugin:1.0.6.RELEASE"
        classpath "org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:2.6.2"

    }
}

apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'


//java version
sourceCompatibility = 1.8
targetCompatibility = 1.8

idea {
    module {
        jdkName "1.8"
    }
}

version = '1.0'

repositories {
    mavenCentral()
    maven {
        url 'http://repo1.maven.org/maven2'
    }
}

dependencies {
    def defaultBoot = ['spring-boot-starter',
                       'spring-boot-starter-web',
                       'spring-boot-starter-actuator',
                       'spring-boot-starter-security',
                       'spring-boot-starter-webflux',
                       'spring-boot-starter-tomcat',
                        'spring-boot-starter-data-jpa'
    ]

    defaultBoot.each { bootModule ->
        compile("org.springframework.boot:$bootModule:$springBootVersion")
    }
    compile("ch.qos.logback:logback-core:1.2.3")
    compile group: 'mysql', name: 'mysql-connector-java', version: '8.0.15'
    compile("org.slf4j:slf4j-api:1.7.25")
    compile("org.fusesource.jansi:jansi:1.11")
    compile("com.google.guava:guava:27.0.1-jre")

    testCompile("org.springframework.boot:spring-boot-starter-test:${springBootVersion}")

    compile("org.elasticsearch:elasticsearch:6.4.1")
    compile("org.elasticsearch.client:elasticsearch-rest-client:6.4.1")
    compile("org.elasticsearch.client:elasticsearch-rest-high-level-client:6.4.1")

    def junitPlatformModules = [
            "junit-platform-commons",
            "junit-platform-engine",
            "junit-platform-runner",
    ]

    junitPlatformModules.each { name ->
        testCompile("org.junit.platform:$name:$junitPlatformVersion")
    }

    def junitVintageModules = [
            "junit-jupiter-api",
            "junit-jupiter-engine",
            "junit-jupiter-params",
    ]
    junitVintageModules.each { name ->
        testCompile "org.junit.jupiter:$name:$junitJupiterVersion"
    }
    testCompile "org.junit.vintage:junit-vintage-engine:$junitJupiterVersion"
    testCompile ("org.junit.platform:junit-platform-runner:$junitPlatformVersion") {
        exclude module: "junit"
    }
    testCompile "org.mockito:mockito-core:2.23.4"

}

apply plugin: "org.sonarqube"
sonarqube {
    properties {
        property "sonar.sourceEncoding", "UTF-8"
        property "sonar.source", "src"
        property "sonar.projectKey", "credit-score"
        property "sonar.projectName", "credit score"
        property "sonar.host.url", "http://localhost:9000"
        property "sonar.language", "java"
        property "sonar.core.codeCoveragePlugin", "jacoco"
        property "sonar.jacoco.reportPath", "${buildDir}/jacoco/jacocoTest.exec"
        property "sonar.junit.reportsPath", "${buildDir}/test-results"
        property "sonar.exclusions", ["src/test/java/**"]
    }
}


task quality(dependsOn: ['build', 'jacocoTestReport', 'sonarqube']){}

